// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String      @id @default(cuid())
  firstName     String
  lastName      String
  sex           String
  dateOfBirth   DateTime
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  password      String
  role          UserRole    @default(USER)
  accounts      Account[]
  dogs          Dog[]
  Attending     Attending[]
  createdEvents Event[]     @relation("createdBy")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Dog {
  id           String         @id @default(cuid())
  name         String
  userId       String
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  attending    Attending[]
  attendingDog AttendingDog[]

  @@map("dogs")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  createdBy   User        @relation(name: "createdBy", fields: [userId], references: [id])
  userId      String
  attending   Attending[]

  @@map("events")
}

model Attending {
  id      String         @id @default(uuid())
  event   Event          @relation(fields: [eventId], references: [id])
  user    User           @relation(fields: [userId], references: [id])
  eventId String
  userId  String
  dogs    AttendingDog[]
  Dog     Dog?           @relation(fields: [dogId], references: [id])
  dogId   String?

  @@unique([eventId, userId])
  @@map("attending")
}

model AttendingDog {
  id          String    @id @default(cuid())
  attending   Attending @relation(fields: [attendingId], references: [id])
  dog         Dog       @relation(fields: [dogId], references: [id])
  attendingId String
  dogId       String

  @@unique([attendingId, dogId])
  @@map("attending_dog")
}
